import React, { useEffect, useState } from 'react';

// Placeholder DataTable component
const DataTable = ({ data, columns }) => {
  return (
    <table>
      <thead>
        <tr>
          {columns.map((column, idx) => (
            <th key={idx}>{column.header}</th>
          ))}
        </tr>
      </thead>
      <tbody>
        {data.map((row, idx) => (
          <tr key={idx}>
            {columns.map((column) => (
              <td key={column.dataField}>{row[column.dataField]}</td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
};

const Day30Vol = () => {
  const [sumsData, setSumsData] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch('/data_table_big.json')
      .then((response) => response.json())
      .then((jsonData) => {
		console.log(jsonData)
        if (!jsonData.length) throw new Error('No data available');

        // Collect all unique keys (coin names) from all entries
        const allKeys = jsonData.reduce((keys, entry) => {
          Object.keys(entry).forEach(key => {
            if (key !== 'date') keys.add(key);
          });
          return keys;
        }, new Set());

        const coins = Array.from(allKeys);

        // Dynamically initialize sums for each coin
        let sums = coins.reduce((acc, coin) => {
          acc[coin] = { latest: 0, lastWeek: 0, lastMonth: 0, lastThreeMonths: 0 };
          return acc;
        }, {});

        // Calculate the sums for each coin
        jsonData.forEach((entry, index, array) => {
          coins.forEach((coin) => {
            const value = entry[coin] || 0; // Default to 0 if the value is missing
            const lastIndex = array.length - 1;
            const dateOffsets = { oneWeek: 7, oneMonth: 30, threeMonths: 90 };
            
            // Add to the respective time frame sum
            Object.entries(dateOffsets).forEach(([timeFrame, offset]) => {
              const pastIndex = lastIndex - offset >= 0 ? lastIndex - offset : 0;
              if (index >= pastIndex) sums[coin][`last${timeFrame.charAt(0).toUpperCase() + timeFrame.slice(1)}`] += value;
            });
            
            if (index === lastIndex) sums[coin].latest = value;
          });
        });

        // Convert sums to an array suitable for the DataTable
        const sumsArray = coins.map((coin) => ({
          coin,
          ...sums[coin],
        }));

        setSumsData(sumsArray);
      })
      .catch((error) => console.error('Error fetching data:', error))
      .finally(() => setLoading(false));
  }, []);

  // Define the columns for the DataTable
  const columns = [
    { header: 'Coin', dataField: 'coin' },
    { header: 'Latest', dataField: 'latest' },
    { header: 'Last Week', dataField: 'lastWeek' },
    { header: 'Last Month', dataField: 'lastMonth' },
    { header: 'Last Three Months', dataField: 'lastThreeMonths' },
  ];

  return (
    <div>
      <h2 style={{ textAlign: 'center' }}>Summary Volume by Time Frame</h2>
      {loading ? (
        <p>Loading...</p>
      ) : (
        <DataTable
          data={sumsData}
          columns={columns}
        />
      )}
    </div>
  );
};

export default Day30Vol;
